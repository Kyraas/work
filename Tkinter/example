# -*- coding: utf-8 -*-
from threading import Thread
import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, TOP, BOTTOM, LEFT, GROOVE, S, W, BOTH, X
from subprocess import Popen, PIPE
from editConfigFile import serial_ports, get_disklist, update_config
from datetime import datetime

class App(tk.Tk):
    def __init__(self):
        super().__init__()

        self.popen = None     # will hold a reference to a Popen object
        self.running = False  # True if the process is running
        self.dirpath1 = tk.StringVar()
        self.dirpath2 = tk.StringVar()
        self.dirpath1.set("D:\\Каталог запросов и шаблонов")
        self.dirpath2.set("D:\\Каталог ответов и квитанций")
        self.pc_num = tk.IntVar()

        # Верхний фрейм (панель)
        self.top_frame = tk.Frame(self, relief=GROOVE)
        self.top_frame.pack(side=TOP, fill=X)

        # 1) Переключатели
        self.frame1 = tk.LabelFrame(self.top_frame, text="Текущий ПК:", relief=GROOVE)
        self.frame1.pack(side=LEFT, padx=10, pady=(10,0))
        self.master = tk.Radiobutton(self.frame1, text="Ведущий", variable=self.pc_num, value=0)
        self.master.pack(pady=7, padx=5)
        self.slave = tk.Radiobutton(self.frame1, text="Ведомый", variable=self.pc_num, value=1)
        self.slave.pack(pady=(0,8))

        # 2) Фрейм с выпадающими списками
        self.frame2 = tk.LabelFrame(self.top_frame, text="Настройки конфигурации:", relief=GROOVE)
        self.frame2.pack(side=LEFT, padx=(0,10), pady=(10,0))

            # 2.1) COM порт
        self.frame2_1 = tk.Frame(self.frame2, relief=GROOVE)
        self.frame2_1.pack(side=TOP, padx=10, pady=10)
        self.COM_label = tk.Label(self.frame2_1, text="COM порт:")
        self.COM_label.pack(side=LEFT)
        self.COM_ports = ttk.Combobox(self.frame2_1, values=serial_ports(), state="readonly")
        self.COM_ports.current(0)
        self.COM_ports.pack(side=LEFT)

            # 2.2) Буква диска
        self.frame2_2 = tk.Frame(self.frame2, relief=GROOVE)
        self.frame2_2.pack(side=LEFT, padx=10, pady=(0,10))
        self.disk_label = tk.Label(self.frame2_2, text="Диск:")
        self.disk_label.pack(side=LEFT, padx=(0,30))
        self.disk_letters = ttk.Combobox(self.frame2_2, values=get_disklist(), state="readonly")
        self.disk_letters.current(0)
        self.disk_letters.pack(side=LEFT)

        # 3) Фрейм с каталогами
        self.frame3 = tk.LabelFrame(self.top_frame, text="Пути к каталогам:", relief=GROOVE)
        self.frame3.pack(side=LEFT, pady=(10,0))

            # 3.1) Каталог запросов и шаблонов
        self.frame3_1 = tk.Frame(self.frame3, relief=GROOVE)
        self.frame3_1.pack(side=TOP, padx=10, pady=5)
        self.dir1_label = tk.Label(self.frame3_1, text="Каталог запросов и шаблонов:")
        self.dir1_label.pack(side=LEFT)
        self.dir1_entry = tk.Entry(self.frame3_1, width=50, textvariable=self.dirpath1)
        self.dir1_entry.pack(side=LEFT)
        self.dir1 = tk.Button(self.frame3_1, text="...", command=self.open_dialog1)
        self.dir1.pack(padx=(5,0))

            # 3.2) Каталог ответов и квитанций
        self.frame3_2 = tk.Frame(self.frame3, relief=GROOVE)
        self.frame3_2.pack(padx=10, pady=5, anchor=W)
        self.dir2_label = tk.Label(self.frame3_2, text="Каталог ответов и квитанций:")
        self.dir2_label.pack(side=LEFT, padx=(0,9))
        self.dir2_entry = tk.Entry(self.frame3_2,  width=50, textvariable=self.dirpath2)
        self.dir2_entry.pack(side=LEFT)
        self.dir2 = tk.Button(self.frame3_2, text="...", command=self.open_dialog2)
        self.dir2.pack(padx=(5,0))

        # 4) Фрейм с кнопками
        self.frame4 = tk.Frame(self.top_frame, relief=GROOVE)
        self.frame4.pack(side=LEFT, padx=(15,0), pady=(30,0))
        self.start_button = tk.Button(self.frame4, width=10, text="Старт", command=self.start)
        self.start_button.pack(pady=(0,10))
        self.stop_button = tk.Button(self.frame4, width=10, text="Стоп", command=self.stop)
        self.stop_button.pack(pady=(0,10))

        # 5) Кнопка "Очистить"
        self.frame5 = tk.Frame(self.top_frame, relief=GROOVE)
        self.frame5.pack(side=LEFT, anchor=S, padx=10, pady=10)
        self.stop_button = tk.Button(self.frame5, width=10, text="Очистить", command=self.clear)
        self.stop_button.pack()

        # Нижний фрейм (консоль)
        self.bottom_frame = tk.Frame(self, relief=GROOVE)
        self.bottom_frame.pack(side=BOTTOM, fill=BOTH, expand=1, padx=10, pady=10)
        self.console = scrolledtext.ScrolledText(self.bottom_frame, state="disabled")
        self.console.pack(fill=BOTH, expand=1)

    def open_dialog1(self):
        name = filedialog.askdirectory()
        self.dirpath1.set(name.replace("/","\\"))

    def open_dialog2(self):
        name = filedialog.askdirectory()
        self.dirpath2.set(name.replace("/","\\"))

    def clear(self):
        self.console.config(state="normal")
        self.console.delete(1.0, "end-1c")
        self.console.config(state="disabled")

    def show(self, message):
        self.console.config(state="normal")
        self.console.insert("end", message)
        self.console.see("end")
        self.console.config(state="disabled")

    def start(self):
        self.stop()
        self.running = True
        Thread(target=self.process).start()

    def process(self):
        while self.running:
            self.execute()

    def stop(self):
        if self.popen:
            try:
                self.popen.kill()
            except ProcessLookupError: 
                pass 
        self.running = False

    def execute(self):

        pc_num = self.pc_num.get()
        com = self.COM_ports.get()
        letter = self.disk_letters.get()
        dir_path1 = self.dir1_entry.get()
        dir_path2 = self.dir2_entry.get()

        script_name = "USBSwitch_master.ps1"
        if pc_num == 1:
            script_name = "USBSwitch_slave.ps1"

        update_config(com, letter, pc_num, dir_path1, dir_path2)

        self.popen = Popen(f'powershell -ExecutionPolicy Unrestricted -file ".\\Windows scripts\\{script_name}" ', stdout=PIPE)   #C:\Users\ddas\Documents\GitRep\USB\Windows scripts
        # powershell -ExecutionPolicy Unrestricted -file "C:\Users\ddas\Documents\GitRep\USB\Windows scripts\USBSwitch_master.ps1"
        lines_iterator = iter(self.popen.stdout.readline, b"")
        while self.popen.poll() is None:
            for line in lines_iterator:
                self.show(line.decode("CP866"))
        
        self.show(str(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))+" Скрипт остановлен.\n\n")
        self.stop()

app = App()

w = app.winfo_screenwidth()
h = app.winfo_screenheight()
w = w//2 # середина экрана
h = h//2 
w = w - 550 # смещение от середины
h = h - 300
app.geometry(f'1100x600+{w}+{h}')
app.minsize(height=200, width=1000)

app.iconbitmap('usb_icon.ico')
app.title("USB Switch")
app.mainloop()
